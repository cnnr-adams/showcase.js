const fetch = require('node-fetch');
require('babel-polyfill');
import GitHub, { Repository } from 'github-api';
import { reporters } from 'mocha';
const base = 'https://api.github.com';
const download = 'https://raw.githubusercontent.com';
const showcaseFile = 'showcase.json';
var fs = require('fs');
var gh = new GitHub({
    username: process.env.USERNAME,
    password: process.env.PASSWORD
});
const handleRepo = (repoFull, username) => new Promise(async (resolve, reject) => {
    const { name, description } = repoFull;
    const repo = await gh.getRepo(repoFull.full_name);
    const userCommits = await repo.getContributors()
        .then((json) => {
            for (const user of json.data) {
                if (user.login === username) {
                    resolve(user.contributions);
                }
            }
            resolve(0);
        });
    const autoGeneratedObj = {
        name, description, userCommits
    };
    try {
        const showcaseContents = (await repo.getContents("master", "showcase.json")).contents;
        console.log(showcaseContents);
        resolve(Object.assign(autoGeneratedObj, showcaseContents));
    } catch (err) {
        reject(new Error(`No ${showcaseFile}`));
    }

});

const handleRepos = async (repoData, username) => {
    const res = [];
    for (const repo of repoData) {
        if (!repo.private) {
            handleRepo(repo, username)
                .then(obj => res.push(obj));
        }
    }
    return res;
};

const showcase = () => new Promise(async (resolve, reject) => {
    const user = gh.getUser();
    const repoData = await user.listRepos();
    const username = (await user.getProfile()).login;
    const res = await handleRepos(repoData.data, username);
    resolve(res);
});

export default showcase;

export { handleRepo, handleRepos };
